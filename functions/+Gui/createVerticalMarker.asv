function api = createVerticalMarker(varargin)
%CREATEVERTICALMARKER
%   
    isBooleanString = @(x) any(validatestring(x, {'off', 'on'}));
    p = inputParser;
    p.addRequired('axes', @ishandle);
    p.addOptional('Parent', -1, @ishandle);
    p.addOptional('MinInput', 'off', isBooleanString);
    p.addOptional('MaxInput', 'off', isBooleanString);
    p.addOptional('ValueInput', 'off', isBooleanString);
    p.addOptional('SliderInput', 'on', isBooleanString);
    p.addOptional('Value', Inf, @isnumeric);
    p.addOptional('Color', [0 0 0]);
    p.addOptional('Callback', (@(x,~) x));
    p.addOptional('ValueCallback', (@(x,~) x));
    p.addOptional('Position', [50 50 300 40]);
    
    p.parse(varargin);
    
    
    
    if (p.Results.Parent == -1)
        parent = get(p.Result.axes, 'Parent');
    else
        parent = p.Results.Parent;
    end
    
    dim = axis(p.Results.axes);
    min = dim(1);
    max = dim(2);
    if (p.Result.Value == Inf)
        value = min;
    else
        value = p.Result.Value;
    end
    
    
    
    api.setColor = @localeSetColor;
    api.setMin = @localeSetMin;
    api.setMax = @localeSetMax;
    api.setValue = @localeSetValue;
    
    createUiControls();

    function localeSetColor(color)
        set(api.handles.slider, 'Color', color);
    end

    function localeSetMin(newMin)
        assert(isnumeric(newMin), ...
            'verticalMarker:nonNumericMin', ...
            'Minimal value must be numeric.');
        
        min = newMin;
        set(api.handles.slider, 'Min', min);
    end

    function localeSetMax(newMax)
        assert(isnumeric(newMax), ...
            'verticalMarker:nonNumericMax', ...
            'Maximal value must be numeric.');

        max = newMax;
        set(api.handles.slider, 'Max', max);
    end

    function localeSetValue(value)
        assert(isnumeric(value), ...
            'verticalMarker:nonNumericValue', ...
            'Value must be numeric.');
        assert(value >= min, ...
            'verticalMarker:valueTooSmall', ...
            'Value is too small.');
        assert(value <= max, ...
            'verticalMarker:valueTooBig', ...
            'Value is too big.');
        
        
    end

    function sliderCallback(hObject,~)
        api.setValue(get(hObject, 'Value'));
    end

    function createUiControls()
        % panel
        api.handles.panel = uipanel( ...
            'ResizeFcn', @manageLayout, ...
            'Parent', parent ...
        );
        
        % valueInput
        api.handles.valueInput = uicontrol( ...
            'Style', 'edit', ...
            'String', sprintf('%.2f', value), ...
            'Callback', @(h, e)api.setValue(num2double(get(h, 'String'))), ...
            'HandleVisibility', 'off', ...
            'Visible', p.Result.ValueInput, ...
            'Parent', api.handles.panel ...
        );
        % minInput
        api.handles.minInput = uicontrol( ...
            'Style', 'edit', ...
            'String', sprintf('%.2f', min), ...
            'Callback', @(h, e)api.setMin(num2double(get(h, 'String'))), ...
            'HandleVisibility', 'off', ...
            'Visible', p.Result.MinInput, ...
            'Parent', api.handles.panel ...
        );
        % slider
        api.handles.slider = uicontrol( ...
            'Style', 'slider', ...
            'Value', value, ...
            'Min', min, ...
            'Max', max, ...
            'Callback', @sliderCallback, ...
            'SliderStep', [0.01, 0.1], ...
            'HandleVisibility', 'off', ...
            'Visible', p.Result.SliderInput, ...
            'Parent', api.handles.panel ...
        );
        % minInput
        api.handles.maxInput = uicontrol( ...
            'Style', 'edit', ...
            'String', sprintf('%.2f', max), ...
            'Callback', @(h, e)api.setMax(num2double(get(h, 'String'))), ...
            'HandleVisibility', 'off', ...
            'Visible', p.Result.MaxInput, ...
            'Parent', api.handles.panel ...
        );
    end

    function manageLayout(~, ~)
        pDim = get(api.handles.panel, 'Position');
        width = pDim(3);
        height = pDim(4);
        
        
    end
end

