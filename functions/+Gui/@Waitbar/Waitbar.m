classdef Waitbar < handle
    %WAITBAR a waitbar to be embedded in a self created figure
    %   WAITBAR(..., propertyKey, propertyValue) allows to change the
    %   underlying axes object to be created with specific properties.
    properties(SetObservable)
        Value = 0
    end
    
    properties(Access=private)
        a
        p
        t
        timer
        elapsedTimeDisplay
        estimatedRemainingTimeDisplay
    end
    
    properties(Dependent)
        Position
        Color
        Parent
        elapsedTime
        estimatedRemainingTime
    end
    
    methods
        function this = Waitbar(value, varargin)
            this.a = handle(axes( ...
                'units', 'pixels', ...
                'Position', [20, 20, 120, 15], ...
                varargin{:}, ...
                'Box', 'on', ...
                'Color', [1, 1, 1], ...
                'HandleVisibility', 'off', ...
                'TickDir', 'in', ...
                'XGrid', 'off', ...
                'XLim', [0, 1], ...
                'XLimMode', 'manual', ...
                'XMinorGrid', 'off', ...
                'XMinorTick', 'off', ...
                'XTick', [], ...
                'XTickMode', 'manual', ...
                'YGrid', 'off', ...
                'YLim', [0, 1], ...
                'YLimMode', 'manual', ...
                'YMinorGrid', 'off', ...
                'YMinorTick', 'off', ...
                'YScale', 'linear', ...
                'YTick', [], ...
                'YTickMode', 'manual' ...
            ));
            this.p = handle(patch( ...
                [0; 0; value; value], [0; 1; 1; 0], [0, 0.5, 1], ...
                'Parent', this.a, ...
                'MarkerEdgeColor', 'none', ...
                'MarkerFaceColor', 'none' ...
            ));
            this.t = handle(text(0.5, 0.5, sprintf('% 3.0f%%', value * 100), ...
                'Parent', this.a, ...
                'HandleVisibility', 'off', ...
                'HorizontalAlignment', 'center', ...
                'VerticalAlignment', 'middle' ...
            ));
            this.elapsedTimeDisplay = handle(text(0, 0.5, sprintf('% 3d:%02d', 0, 0), ...
                'Parent', this.a, ...
                'HandleVisibility', 'off', ...
                'HorizontalAlignment', 'left', ...
                'VerticalAlignment', 'middle' ...
            ));
            this.estimatedRemainingTimeDisplay = handle(text(1, 0.5, sprintf('% 3d:%02d', 0, 0), ...
                'Parent', this.a, ...
                'HandleVisibility', 'off', ...
                'HorizontalAlignment', 'right', ...
                'VerticalAlignment', 'middle' ...
            ));
            this.timer = tic();
            this.Value = value;
            drawnow();
        end
        
        function set.Value(this, value)
            this.Value = value;
            this.p.XData = [0; 0; value; value];
            this.t.String = sprintf('% 3.0f%%', value * 100);
            this.updateTimeDisplays();
            drawnow();
        end
        
        function set.Position(this, pos)
            this.a.Position = pos;
        end
        function pos = get.Position(this)
            pos = this.a.Position;
        end
        function set.Color(this, color)
            this.p.FaceColor = color;
        end
        function color = get.Color(this)
            color = this.p.FaceColor;
        end
        function set.Parent(this, parent)
            this.a.Parent = parent;
        end
        function parent = get.Parent(this)
            parent = this.a.Parent;
        end
        
        function time = get.elapsedTime(this)
            time = toc(this.timer);
        end
        function time = get.estimatedRemainingTime(this)
            if (this.Value)
                time = (1 - this.Value)/this.Value * this.elapsedTime;
            else
                time = Inf;
            end
        end
        
        function updateTimeDisplays(this)
            this.elapsedTimeDisplay.String = createTimeString(this.elapsedTime);
            this.estimatedRemainingTimeDisplay.String = createTimeString(this.estimatedRemainingTime);
            
            function str = createTimeString(time)
                if isfinite(time)
                    m = floor(time / 60);
                    s = mod(round(time), 60);
                    str = sprintf('% 3d:%02d', m, s);
                else
                    str = 'Inf';
                end
            end
        end
        
        function resetTime(this)
            this.timer = tic();
        end
    end
    
end

