function open(this, preselect)
    if (isfield(this.handles, 'figure') && ishandle(this.handles.figure))
        return;
    end
    
    if (nargin < 2)
        preselect = [];
    end
    
    this.handles = struct();
    
    width = 500;
    height = 400;
    
    if (isempty(this.title))
        title = 'Stack Manager';
    else
        title = this.title;
    end
    
    this.handles.figure = handle(figure( ...
        'NumberTitle', 'off', ...
        'Name', title, ...
        'HandleVisibility', 'off', ...
        'Color', 'w', ...
        'Position', [50, 50, width, height], ...
        'CloseRequestFcn', @this.close, ...
        'Resize', 'on', ...
        'Menubar', 'none', ...
        'Toolbar', 'figure' ...
    ));
    addlistener(this.handles.figure, 'SizeChange', @arrangeFigure);
    
    this.handles.header = createHeader();
    [this.handles.outerStackContainer, this.handles.innerStackContainer] = ...
        createStackContainer();
    this.handles.stackPanels = cell(size(this.stacks));
    
    for stackIndex = 1:numel(this.stacks)
        stack = this.stacks{stackIndex};
        this.handles.stackPanels{stackIndex} = this.addStackPanel(stack);
    end
    
    movegui(this.handles.figure, 'center');
    
    function header = createHeader()
        header = handle(uipanel( ...
            'Parent', this.handles.figure, ...
            'Units', 'pixels', ...
            'BackgroundColor', this.handles.figure.Color, ...
            'HandleVisibility', 'off', ...
            'BorderWidth', 0 ...
        ));
        addlistener(header, 'SizeChange', @arrange);
        
        text = handle(uicontrol( ...
            'Parent', header, ...
            'HandleVisibility', 'off', ...
            'BackgroundColor', header.BackgroundColor, ...
            'Style', 'text', ...
            'String', 'Stacks', ...
            'HorizontalAlignment', 'left' ...
        ));
        decorateAllStacks = handle(uicontrol( ...
            'Parent', header, ...
            'HandleVisibility', 'off', ...
            'Visible', 'off', ...
            'Style', 'pushbutton', ...
            'String', 'decorate all', ...
            'Callback', @(~,~)this.addStack(TiffStackDecorator.guiAddDecorator(this.stacks)) ...
        ));
        calculateStacks = handle(uicontrol( ...
            'Parent', header, ...
            'HandleVisibility', 'off', ...
            'Visible', 'off', ...
            'Style', 'pushbutton', ...
            'String', 'calculate', ...
            'Callback', @(~,~)this.addStack(CalculationTiffStack.guiCalculate(this.stacks)) ...
        ));
        this.handles.stackListener = addlistener(this, 'stacks', 'PostSet', @setVisibility);
        addStacks = handle(uicontrol( ...
            'Parent', header, ...
            'HandleVisibility', 'off', ...
            'Style', 'pushbutton', ...
            'String', '+', ...
            'Callback', @(~,~)this.addStack(TiffStack.guiCreateStack(preselect)) ...
        ));
        
        function arrange(~,~)
            pos = header.Position;
            text.Position = [5, 5, pos(3) - 10, pos(4) - 10];
            
            decorateAllStacks.Position = [ ...
                pos(3) - 25 - 55 - 75, ...
                (pos(4) - 20 ) / 2, ...
                70, ...
                20 ...
            ];
            calculateStacks.Position = [ ...
                pos(3) - 25 - 55, ...
                (pos(4) - 20 ) / 2, ...
                50, ...
                20 ...
            ];
            addStacks.Position = [ ...
                pos(3) - 25, ...
                (pos(4) - 20 ) / 2, ...
                20, ...
                20 ...
            ];
        end
        function setVisibility(~,~)
            if (numel(this.stacks) >= 1)
                decorateAllStacks.Visible = 'on';
            else
                decorateAllStacks.Visible = 'off';
            end
            if (numel(this.stacks) >= 2)
                calculateStacks.Visible = 'on';
            else
                calculateStacks.Visible = 'off';
            end
        end
    end

    function [outerStackContainer, innerStackContainer] = createStackContainer()
        outerStackContainer = handle(uipanel( ...
            'Parent', this.handles.figure, ...
            'HandleVisibility', 'off', ...
            'Units', 'pixels', ...
            'BackgroundColor', this.handles.figure.Color, ...
            'BorderWidth', 1 ...
        ));
        addlistener(outerStackContainer, 'SizeChange', @arrangeOuter);
        
        innerStackContainer = handle(uipanel( ...
            'Parent', outerStackContainer, ...
            'HandleVisibility', 'off', ...
            'Units', 'pixels', ...
            'BackgroundColor', outerStackContainer.BackgroundColor, ...
            'BorderWidth', 0 ...
        ));
        addlistener(innerStackContainer, 'SizeChange', @arrangeInner);
        
        
        function arrangeOuter(~,~)
            pos = outerStackContainer.Position;
            innerPos = innerStackContainer.Position;
            innerStackContainer.Position = [ ...
                5, ...
                pos(4) - 5 - innerPos(4), ...
                pos(3) - 10, ...
                innerPos(4) ...
            ];
        end
        
        function arrangeInner(~,~)
            this.arrangeStackContainer();
        end
    end
    
    function arrangeFigure(~,~)
        pos = this.handles.figure.Position;
        this.handles.header.Position = [ ...
            10, ...
            pos(4) - 10 - 30, ...
            pos(3) - 20, ...
            30 ...
        ];
        this.handles.outerStackContainer.Position = [ ...
            10, ...
            10, ...
            pos(3) - 20, ...
            pos(4) - 10 - 10 - 30 ...
        ];
    end
end