function open(this)
    if (isfield(this.handles, 'figure') && ishandle(this.handles.figure))
        return;
    end
    
    this.handles = struct();
    
    width = 500;
    height = 400;
    
    if (isempty(this.title))
        title = 'Cell Manager';
    else
        title = this.title;
    end
    
    this.handles.figure = handle(figure( ...
        'NumberTitle', 'off', ...
        'Name', title, ...
        'HandleVisibility', 'off', ...
        'Color', 'w', ...
        'Position', [50, 50, width - 1, height], ...
        'CloseRequestFcn', @this.close, ...
        'Resize', 'on', ...
        'Menubar', 'none', ...
        'Toolbar', 'none' ...
    ));
    try
        addlistener(this.handles.figure, 'SizeChanged', @arrangeFigure);
    catch
        addlistener(this.handles.figure, 'SizeChange', @arrangeFigure);
    end
    
    this.handles.header = this.createHeader();
    [this.handles.outerContainer, this.handles.innerContainer] = ...
        createContainer();
    this.handles.entryPanels = {};
    movegui(this.handles.figure, 'center');
    arrangeFigure();
    
    function [outerContainer, innerContainer] = createContainer()
        outerContainer = handle(uipanel( ...
            'Parent', this.handles.figure, ...
            'HandleVisibility', 'off', ...
            'Units', 'pixels', ...
            'BackgroundColor', this.handles.figure.Color, ...
            'BorderWidth', 1 ...
        ));
        
        try
            addlistener(outerContainer, 'SizeChanged', @arrangeOuter);
        catch
            addlistener(outerContainer, 'SizeChange', @arrangeOuter);
        end
        
        innerContainer = handle(uipanel( ...
            'Parent', outerContainer, ...
            'HandleVisibility', 'off', ...
            'Units', 'pixels', ...
            'BackgroundColor', outerContainer.BackgroundColor, ...
            'BorderWidth', 0 ...
        ));
        try
            addlistener(innerContainer, 'SizeChanged', @arrangeInner);
        catch
            addlistener(innerContainer, 'SizeChange', @arrangeInner);
        end
        
        scrollbar = handle(uicontrol( ...
            'Parent', outerContainer, ...
            'Style', 'slider', ...
            'HandleVisibility', 'off', ...
            'Units', 'pixels', ...
            'Visible', 'off', ...
            'Min', 0 ...
        ));
        inArrange = false;
        addlistener(scrollbar, 'Value', 'PostSet', @updateScrollPosition);
        
        function arrangeOuter(~,~)
            inArrange = true;
            pos = outerContainer.Position;
            scrollbar.Position = [ ...
                pos(3) - 15, ...
                0, ...
                15, ...
                pos(4);
            ];
            innerPos = innerContainer.Position;
            neededSpace = innerPos(4) + 10;
            
            if (neededSpace > pos(4))
                rightPadding = 15;
                value = scrollbar.Max - scrollbar.Value;
                scrollbar.Value = 0;
                scrollbar.Max = neededSpace - pos(4);
                if (value > scrollbar.Max)
                    value = scrollbar.Max;
                end
                scrollbar.Value = scrollbar.Max - value;
                scrollbar.Visible = 'on';
                minorStep = min(1, 30 / scrollbar.Max);
                majorStep = max(minorStep, pos(4) / (neededSpace - pos(4)));
                scrollbar.SliderStep = [minorStep, majorStep];
            else
                scrollbar.Value = scrollbar.Max;
                scrollbar.Visible = 'off';
                rightPadding = 15;
            end
            innerContainer.Position = [ ...
                5, ...
                pos(4) - 5 - innerPos(4) + scrollbar.Max - scrollbar.Value, ...
                pos(3) - 10 - rightPadding, ...
                innerPos(4) ...
            ];
            inArrange = false;
        end
        
        function updateScrollPosition(~,~)
            if ~inArrange
                arrangeOuter();
            end
        end
        
        function arrangeInner(~,~)
            this.arrangeContainer();
            arrangeOuter();
        end
    end
    
    function arrangeFigure(~,~)
        pos = this.handles.figure.Position;
        this.handles.header.Position = [ ...
            10, ...
            pos(4) - 10 - 30, ...
            pos(3) - 20, ...
            30 ...
        ];
        this.handles.outerContainer.Position = [ ...
            10, ...
            10, ...
            pos(3) - 20, ...
            pos(4) - 10 - 10 - 30 ...
        ];
    end
end