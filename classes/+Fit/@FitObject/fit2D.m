function [fitobj, goodness, output, warnstr, errstr, convmsg] = ...
        fit2D(obj, xData, yData, zData)
%     if (nargin < 3)
%         yData = xData;
%         xData = transpose(1:numel(xData));
%     end
%     
%     xDataSize = size(xData);
%     assert( ...
%         all(xDataSize == size(yData)), ...
%         'FitObject:fit:wrongDimensions', ...
%         'x and y data must have same size' ...
%     );
%     assert( ...
%         min(xDataSize) == 1, ...
%         'FitObject:fit:noVector', ...
%         'Data must be a vector.' ...
%     );
%     if (xDataSize(1) == 1)
%         xData = transpose(xData);
%         yData = transpose(yData);
%     end
    
    optionNames = fieldnames(obj.options);
    optionsArgs = cell(2*numel(optionNames), 1);
    for i = 1:numel(optionNames)
        optionsArgs{(i - 1) * 2 + 1} = optionNames{i};
        optionsArgs{(i - 1) * 2 + 2} = obj.options.(optionNames{i});
    end

    [parameterNames, start, lower, upper] = ...
        obj.getListProperties('parameter');

    [problemNames, problemValues] = ...
        obj.getListProperties('problem');

    independentNames = obj.getListProperties('independent');

    foptions = fitoptions(optionsArgs{:}, 'Lower', lower, 'Upper', upper);
    type = fittype(...
        obj.funcBody, ...
        'coefficient', parameterNames, ...
        'independent', independentNames, ...
        'dependent', {'dependentVariable'}, ...
        'problem', problemNames, ...
        'options', foptions ...
    );
    

    filter = ...
        (yData >= obj.startY & yData <= obj.endY) & ...
        (xData >= obj.startX & xData <= obj.endX);
    x = xData(filter);
    y = yData(filter);
    z = zData(filter);

    [fitobj, goodness, output, warnstr, errstr, convmsg] = fit( ...
        [x, y], z, ...
        type, ...
        'StartPoint', start, ...
        'problem', ...
        num2cell(problemValues) ...
    );

    for i = 1:obj.numArguments
        if ~strcmp(obj.argumentType{i}, 'independent')
            obj.arguments(i).value = fitobj.(obj.arguments(i).name);
        end
    end

    obj.lastResult.fitobj = fitobj;
    obj.lastResult.goodness = goodness;
    obj.lastResult.output = output;
    obj.lastResult.warnstr = warnstr;
    obj.lastResult.errstr = errstr;
    obj.lastResult.convmsg = convmsg;
end