function result = GUI_fit(data, varargin)
    dataLength = numel(data);
    markerCount = 4;
    
    result = struct( ...
        'button', 3 ...
    );
    result.marker = [ones(1, markerCount/2) ones(1, markerCount/2)*dataLength];
    for i = 2:-1:1
        result.fit(i) = struct( ...
            'deltaI', 0, ...
            'tau', 1 ...
        );
    end
    markerColorOrder = [0 1 0; 0.8 0.5 0; 1 0 0; 0 0 0];
    
    %  Create and hide the GUI as it is being constructed.
    f = figure( ...
        'Name', 'Peak fitting', ...
        'NumberTitle', 'off', ...
        'Visible', 'off', ...
        'Position', [50 50 1800 1000], ...
        'ResizeFcn', @manageLayout, ...
        'HandleVisibility', 'off', ...
        'MenuBar', 'none' ...
    );
    
    hPlot = axes('Units', 'Pixels', ...
        'HandleVisibility', 'off', ...
        'Parent', f, ...
        'Position', [150 50 1500 750] ...
    );
    hold(hPlot, 'all');
    plot(data, 'Parent', hPlot);
    
    for i=1:2:numel(varargin) - 1
        if ((i + 1) / 2 <= markerCount)
            result.marker((i + 1) / 2) = varargin{i};
        end
        plot(varargin{i}, varargin{i + 1}, '.', 'MarkerSize', 20, 'Parent', hPlot);
    end
    
    hMarkerText = zeros(1, markerCount);
    for i = markerCount:-1:1
        hMarkerText(i) = uicontrol( ...
            'Style', 'text', ...
            'String', sprintf('Marker %u', i), ...
            'Parent', f, ...
            'Position', [5 980-30*i 50 20] ...
        );
        verticalMarker(i) = Gui.verticalMarker( ...
            hPlot, ...
            'Parent', f, ...
            'Value', result.marker(i), ...
            'ValueInput', 'off', ...
            'Min', 1, ...
            'MinInput', 'off', ...
            'Max', dataLength, ...
            'MaxInput', 'off', ...
            'Position', [60 980-30*i 1690 20], ...
            'ValueCallback', @verticalMarkerCallback, ...
            'Color', markerColorOrder(i, :), ...
            'UserData', struct('index', i) ...
        );
    end
    
    hButton = [ ...
        createClosingButton('OK', 1, ...
             'Position', [300 930-30*markerCount 100 40] ...
        ), ...
        createClosingButton('false', 2, ...
             'Position', [450 930-30*markerCount 100 40] ...
        ), ...
        createClosingButton('hawadere', 3, ...
             'Position', [600 930-30*markerCount 150 40] ...
        ), ...
        uicontrol( ...
            'Style', 'pushbutton', ...
            'String', 'fit', ...
            'FontSize', 20, ...
            'Callback', @hFitCallback, ...
            'Parent', f, ...
            'Position', [800 930-30*markerCount 100 40] ...
        ) ...
    ];
    
    hFitResult = [ ...
        uicontrol( ...
            'Style', 'text', ...
            'Parent', f, ...
            'Position', [950 950-30*markerCount 200 20] ...
        ), ...
        uicontrol( ...
            'Style', 'text', ...
            'Parent', f, ...
            'Position', [950 930-30*markerCount 200 20] ...
        ) ...
    ];
    hFitPlots = [];
    
    set(f, 'Visible', 'on');
    uiwait(f);
    
    function verticalMarkerCallback(api, ~)
        result.marker(api.UserData.index) = round(api.getValue());
    end
    
    function hButton = createClosingButton(string, buttonId, varargin)
        hButton = uicontrol( ...
            'Style', 'pushbutton', ...
            'String', string, ...
            'UserData', buttonId, ...
            'FontSize', 20, ...
            'Callback', @hClosingButtonCallback, ...
            'Parent', f, ...
            varargin{:} ...
        );
    end

    function hClosingButtonCallback(hObject, eventdata)
        %UserData in hObject stores button id.
        
        result.button = get(hObject, 'UserData');
        figureCloseRequest(f, eventdata);
    end
    
    function hFitCallback(~, ~)
        %remove old fitplots
        if (~isempty(hFitPlots))
            for h = hFitPlots
                delete(h);
            end
        end
        
        for index = 1:2
            t0 = result.marker((index - 1) * 2 + 1);
            t1 = result.marker(index * 2);
            if (t0 >= t1)
                continue;
            end
            
            I0 = data(t0);
            
            s = fitoptions( ...
                'Method', 'NonLinearLeastSquares', ...
                'MaxFunEvals', 5000, ...
                'MaxIter', 5000, ...
                'Lower', [-100 5], ...
                'Upper', [100 30] ...
            );
            fun = @(deltaI, tau, I0, t0, t)I0+deltaI*(exp(-(t-t0)/tau) - 1);
            fitModel = fittype( ...
                fun, ...
                'independent', 't', ...
                'problem', {'I0', 't0'}, ...
                'options', s ...
            );
            r = fit( ...
                [t0:t1]', data(t0:t1), ...
                fitModel, ...
                'StartPoint', [I0, 1], ...
                'problem', {I0 t0} ...
            );
            result.fit(index).tau = r.tau;
            result.fit(index).deltaI = r.deltaI;
            
            hFitPlots(index) = plot( ...
                t0:dataLength, ...
                fun(r.deltaI, r.tau, r.I0, r.t0, t0:dataLength), ...
                'Color', [0 0 0], ...
                'Parent', hPlot, ...
                'HitTest', 'off' ...
            );
            
            set(hFitResult(index), ...
                'String', sprintf( ...
                    'Fit %u: deltaI = %.2f, tau = %.2f', ...
                    index, ...
                    r.deltaI, ...
                    r.tau ...
                ) ...
            );
        end
    end

    function manageLayout(~, ~)
        pos = get(f, 'Position');
        
        %window too small
        if (pos(3) < 750)
            pos(3) = 750;
            set(f, 'Position', pos);
        end
        if (pos(4) < 400)
            outerPos = get(f, 'OuterPosition');
            outerPos(2) = outerPos(2) - 400 + pos(4);
            outerPos(4) = outerPos(4) + 400 - pos(4);
            pos(4) = 400;
            set(f, 'OuterPosition', outerPos);
        end
        
        windowWidth = pos(3);
        windowHeight = pos(4);
        
        %width - 2 * margin - sliderTextEndPosition
        sliderWidth = windowWidth - 2 * 5 - 55;
        
        for index = 1:markerCount
            y = windowHeight - 30 * index;
            set(hMarkerText(index), ...
                'Position', [5 y 50 20] ...
            );
            verticalMarker(index).setPosition([60 y sliderWidth 20]);
        end
        y = y - 10;
        
        buttonDim = zeros(numel(hButton), 4);
        buttonWidthSum = 0;
        buttonMargin = 20;
        for index = 1:numel(hButton)
            buttonDim(index,:) = get(hButton(index), 'Position');
            buttonWidthSum = buttonWidthSum + buttonDim(index, 3);
            buttonDim(index, 2) = y - buttonDim(index, 4);
        end
        x = floor((windowWidth - buttonWidthSum - buttonMargin * numel(hButton) - 200) / 2);
        for index = 1:numel(hButton)
            buttonDim(index, 1) = x;
            x = x + buttonDim(index, 3) + buttonMargin;
            set(hButton(index), 'Position', buttonDim(index, :));
        end
        
        for h = hFitResult
            rDim = get(h, 'Position');
            rDim(1) = x;
            rDim(2) = y - rDim(4);
            y = y - rDim(4);
            set(h, 'Position', rDim);
        end
        
        plotDim = zeros(1, 4);
        %sliderWidth - 2 * arrowWidth - sizeOfTray
        plotDim(3) = (sliderWidth - 2 * 20) / 1.1;
        %centered below slider
        plotDim(1) = 55 + ((windowWidth - 55 - plotDim(3)) / 2);
        
        plotDim(2) = 30;
        %take the remaining space
        plotDim(4) = y - 10 - plotDim(2);
        set(hPlot, 'Position', plotDim);
    end
    
    function figureCloseRequest(hObject, ~)
        delete(hObject);
    end
end